#!/bin/bash

DOWNLOAD=false
DOWNLOAD=true

PROCESS_GRAMMARS=false
PROCESS_GRAMMARS=true

COMPILE=false
#COMPILE=true

source ./environment.settings || exit

if $DOWNLOAD ; then

rm -rf ${WORKDIR}

mkdir -p "${WORKDIR}"
mkdir -p "${DISTDIR}"

# /usr/bin/pash '& "./antlrcs-3.5.2_beta1.ps1"'
#/usr/bin/msbuild "./antlrcs-3.5.2_beta1.proj"

# downloading source code
wget -c https://github.com/antlr/antlrcs/tarball/ca331b7109e1faa5a6aa7336bb6281ce9363e62b -O "${ARCHIVE_ORIG}"

# -C, --directory=DIR
#    change to directory DIR
tar -zxvf "${ARCHIVE_ORIG}" -C "${WORKDIR}"

fi

S="${WORKDIR}/$(ls -1 "${WORKDIR}" | grep "\-antlrcs\-")"
echo "\${S}=${S}"

if $DOWNLOAD ; then

#download templates
git clone https://github.com/antlr/antlr3.git ${S}/Reference/antlr3
find "${S}/Reference/antlr3" -type f -not -iname "*.stg" -exec rm -f {} \;
find "${S}/Reference" -type d -empty -delete

# downloading binary antlrcs for generating missing sources
wget -c https://www.nuget.org/api/v2/package/Antlr3.CodeGenerator/3.5.2-beta1 -O "${DISTDIR}/antlr3.codegenerator.3.5.2-beta1.nupkg"
unzip -o "${DISTDIR}/antlr3.codegenerator.3.5.2-beta1.nupkg" -d "${WORKDIR}/generator"

fi

#find ${WORKDIR}/generator

mv ${S}/$OUTPUT_PATH/tool ${S}/$OUTPUT_PATH/Tool
mv ${S}/$OUTPUT_PATH/Tool/templates ${S}/$OUTPUT_PATH/Tool/Templates
mv ${S}/$OUTPUT_PATH/codegen ${S}/$OUTPUT_PATH/Codegen
mv ${S}/$OUTPUT_PATH/Codegen/templates ${S}/$OUTPUT_PATH/Codegen/Templates
rm -rf ${S}/Reference/antlr3/gunit
rm -rf ${S}/Reference/antlr3/runtime

ls -1 ${S}/$OUTPUT_PATH/Tool/Templates

if $PROCESS_GRAMMARS; then

COMMAND="/usr/bin/mono ${WORKDIR}/generator/tools/net40/Antlr3.exe"
find "$S" -iname "*.g3"

DIR=$PWD
cd ${S}/Antlr3/Grammars
${COMMAND} ${S}/Antlr3/Grammars/ANTLR.g3
${COMMAND} ${S}/Antlr3/Grammars/ActionAnalysisLexer.g3
${COMMAND} ${S}/Antlr3/Grammars/TreeToNFAConverter.g3
${COMMAND} ${S}/Antlr3/Grammars/ANTLRTreePrinter.g3
${COMMAND} ${S}/Antlr3/Grammars/AssignTokenTypesWalker.g3
${COMMAND} ${S}/Antlr3/Grammars/ActionTranslator.g3
${COMMAND} ${S}/Antlr3/Grammars/DefineGrammarItemsWalker.g3
${COMMAND} ${S}/Antlr3/Grammars/CodeGenTreeWalker.g3
${COMMAND} ${S}/Antlr3/Grammars/LeftRecursiveRuleWalker.g3
#cd ${S}/Antlr3.StringTemplate/Language
#${COMMAND} ${S}/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3
#${COMMAND} ${S}/Antlr3.StringTemplate/Language/Group.g3
#${COMMAND} ${S}/Antlr3.StringTemplate/Language/Template.g3
#${COMMAND} ${S}/Antlr3.StringTemplate/Language/Interface.g3
#${COMMAND} ${S}/Antlr3.StringTemplate/Language/Action.g3
#${COMMAND} ${S}/Antlr3.StringTemplate/Language/ActionEvaluator.g3
cd ${S}/Antlr4.StringTemplate/Compiler
${COMMAND} ${S}/Antlr4.StringTemplate/Compiler/TemplateParser.g3
${COMMAND} ${S}/Antlr4.StringTemplate/Compiler/Group.g3
${COMMAND} ${S}/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
cd ${S}/build/Validation
${COMMAND} ${S}/build/Validation/Grammar.g3
cd ${DIR}

fi


# remove unnecessary files
rm "${S}/Runtime/Antlr3.Runtime.Debug/ParserDebugger.cs"
rm "${S}/Antlr4.StringTemplate/Debug/DebugTemplate.cs"
rm -rf "${S}/Antlr3.Runtime.Visualizer"
rm -rf "${S}/Antlr3.StringTemplate"
rm -rf "${S}/Antlr3.Test"
rm -rf "${S}/Antlr4.StringTemplate.Visualizer"
rm -rf "${S}/Antlr4.Test.StringTemplate"
rm -rf "${S}/Runtime/Antlr3.Runtime.JavaExtensions"
rm -rf "${S}/Runtime/Antlr3.Runtime.Test"
rm -rf "${S}/Antlr3.Runtime.Test"
rm -rf "${S}/TestResults"
rm -rf "${S}/build"
rm -rf "${S}/.gitattributes"
rm -rf "${S}/.gitignore"
rm -rf "${S}/.gitmodules"
rm -rf "${S}/Antlr3.ruleset"
rm -rf "${S}/Antlr3.sln"
rm -rf "${S}/Antlr3.vsmdi"
rm -rf "${S}/AntlrTestConfig.testrunconfig"
rm -rf "${S}/Directory.Build.props"
rm -rf "${S}/Directory.Build.targets"
rm -rf "${S}/NuGet.config.bootstrap"
rm -rf "${S}/PublishingProcess.txt"
rm -rf "${S}/appveyor.yml"
find "${S}" -type f -iname "*.csproj" -exec rm {} \;
find "${S}/Antlr3.Targets" -type f -iname "*.props" -exec rm {} \;
find "${S}/Antlr3.Targets" -type f -iname "*.targets" -exec rm {} \;
rm ${S}/Antlr3/app.config
find ${S}/Antlr3.Targets/* -type d -not -iname "Antlr3.Targets.CSharp?" -exec rm -rf {} \; 
find ${S}/$OUTPUT_PATH/Codegen/Templates/* -type d -not -iname "CSharp?" -exec rm -rf {} \;

if $COMPILE ; then
    source ./${PN}-${PV}.main_compile
fi

#meld ${WORKDIR}/generator/tools/net40 ${S}/${OUTPUT_PATH}

tar -czvf "${REPACKED_PATHNAME}" -C "${S}" .
cd "${WORKDIR}"
echo "\${REPACKED_PATHNAME}=${REPACKED_PATHNAME}"
